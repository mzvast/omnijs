/*{
    "author": "Author Name",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.mycompany.dueDate2Tag",
    "version": "0.1",
    "description": "A plug-in that...",
    "label": "截止日期更新标签",
    "mediumLabel": "dueDate2Tag",
    "paletteLabel": "dueDate2Tag",
}*/
// 根据截止日期更新标签
// 截止日期在7天内的把ThisMonth改成ThisWeek，截止日期在1天内的ThisWeek改成Today
(() => {
    var action = new PlugIn.Action(function (selection) {
        console.log('selection', selection.tasks, selection.tags)
        if (selection.tasks.length == 0 && selection.tags.length === 0) {
            return;
        }
        // Add code to run when the action is invoked
        // console.log("Invoked with selection", selection);
        function getTagByName(tagName, source) {
            let result = null;
            // console.log('source', source, source.name === tagName)
            if (source.name === tagName) {
                return source;
            }
            let children = source instanceof Array ? source : source.children instanceof Array ? source.children : null
            if (children) {
                let len = children.length;
                let i = 0;
                while (i < len) {
                    // console.log('i', i)
                    let cur = getTagByName(tagName, children[i++])
                    // console.log('cur',cur)
                    if (cur) {
                        result = cur;
                        break;
                    }

                }
            }
            return result
        }

        function isInDays(date, daysFromNow) {
            let now = new Date();
            now.setDate(now.getDate() + daysFromNow);
            return (now.getTime() > date.getTime())
        }

        function isInToday(date) {
            let now = new Date();
            now.setHours(24, 0, 0, 0);
            return (now.getTime() > date.getTime())
        }

        function hasTag(task, tag) {
            return task.tags.indexOf(tag) !== -1
        }

        function ToggleOnSchedueTag(task, tag) {
            task.removeTags(schedueTags.filter(t => t !== tag));
            task.addTag(tag);
        }


        // let ATag = getTagByName('A', tags);
        // console.log('find:', ATag);
        let Tags = {
            // A: getTagByName('A', tags), // 测试用
            Today: getTagByName('Today', tags), // <today
            ThisWeek: getTagByName('ThisWeek', tags),// 1~7day
            Recently: getTagByName('Recently', tags),//7day~15day 试运行
            ThisMonth: getTagByName('ThisMonth', tags),//15～30day
            Someday: getTagByName('Someday', tags)//>30day
        }
        let schedueTags = [Tags.Today, Tags.ThisWeek, Tags.Recently, Tags.ThisMonth, Tags.Someday];
        try {
            let tasks = []
            if (selection.tasks.length > 0) { // 选中tasks
                tasks = selection.tasks
            } else if (selection.tags.length > 0) { // 选中tags
                for (const tag of selection.tags) {
                    
                    tasks.push(...tag.tasks);
                }
            }
            console.log('tasks', tasks)
            for (const task of tasks) {
                let dueDate = task.dueDate;
                if (dueDate) {
                    // console.log('isInToday(date)', isInToday(date))
                    // console.log('isInDays(date, 7)', isInDays(date, 7))
                    // console.log('isInToday(dueDate)', isInToday(dueDate))
                    if (isInToday(dueDate)) {
                        ToggleOnSchedueTag(task, Tags.Today)
                    } else if (isInDays(dueDate, 7)) {
                        ToggleOnSchedueTag(task, Tags.ThisWeek)
                    } else if (isInDays(dueDate, 15)) {
                        ToggleOnSchedueTag(task, Tags.Recently)
                    } else if (isInDays(dueDate, 30)) {
                        ToggleOnSchedueTag(task, Tags.ThisMonth)
                    } else {
                        ToggleOnSchedueTag(task, Tags.Someday)
                    }

                }
            }
        } catch (error) {

        }
    });

    // If needed, uncomment, and add a function that returns true if the current selection is appropriate for the action.
    /*
    action.validate = function(selection){

    };
    */

    return action;
})();
